}
# Create a separate linear model for each predictor variable
model_ph <- lm(Potability ~ ph, data = selected_data1)
# Load required libraries
library(ggplot2)
library(dplyr)
# Check if df_cleanData exists and has the required columns
if (!exists("df_cleanData")) {
stop("df_cleanData does not exist.")
} else if (!all(c("ph", "Hardness", "Chloramines", "Trihalomethanes", "Potability") %in% colnames(df_cleanData))) {
stop("df_cleanData is missing required columns.")
}
# Create selected_data
selected_data <- df_cleanData %>%
select(ph, Hardness, Chloramines, Trihalomethanes, Potability)
# Check if selected_data is created properly
if (!exists("selected_data")) {
stop("selected_data not created.")
}
# Create a separate linear model for each predictor variable
model_ph <- lm(Potability ~ ph, data = selected_data1)
# Load required libraries
library(ggplot2)
library(dplyr)
# Check if df_cleanData exists and has the required columns
if (!exists("df_cleanData")) {
stop("df_cleanData does not exist.")
} else if (!all(c("ph", "Hardness", "Chloramines", "Trihalomethanes", "Potability") %in% colnames(df_cleanData))) {
stop("df_cleanData is missing required columns.")
}
# Create selected_data
selected_data <- df_cleanData %>%
select(ph, Hardness, Chloramines, Trihalomethanes, Potability)
# Check if selected_data is created properly
if (!exists("selected_data")) {
stop("selected_data not created.")
}
# Create a separate linear model for each predictor variable
model_ph <- lm(Potability ~ ph, data = selected_data)
model_Hardness <- lm(Potability ~ Hardness, data = selected_data)
model_Chloramines <- lm(Potability ~ Chloramines, data = selected_data)
model_Trihalomethanes <- lm(Potability ~ Trihalomethanes, data = selected_data)
get_summary <- function(model) {
summary_data <- summary(model)
r <- cor(selected_data$Potability, fitted(model))
p_value <- summary_data$coefficients[2, 4]
return(list(r = r, p_value = p_value))
}
# Get summary statistics for each model
summary_ph <- get_summary(model_ph)
summary_Hardness <- get_summary(model_Hardness)
summary_Chloramines <- get_summary(model_Chloramines)
summary_Trihalomethanes <- get_summary(model_Trihalomethanes)
# ph
plot_ph <- ggplot(selected_data1, aes(x = ph, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "ph", y = "Potability") +
annotate("text", x = 4, y = 0.8, label = paste("r =", round(summary_ph$r, 3), "\n", "p-value =", round(summary_ph$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ ph")
# Hardness
plot_Hardness <- ggplot(selected_data, aes(x = Hardness, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Hardness", y = "Potability") +
annotate("text", x = 60, y = 0.8, label = paste("r =", round(summary_Hardness$r, 3), "\n", "p-value =", round(summary_Hardness$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Hardness")
# Chloramines
plot_Chloramines <- ggplot(selected_data, aes(x = Chloramines, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Chloramines", y = "Potability") +
annotate("text", x = 0, y = 0.8, label = paste("r =", round(summary_Chloramines$r, 3), "\n", "p-value =", round(summary_Chloramines$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Chloramines")
# Trihalomethanes
plot_Trihalomethanes <- ggplot(selected_data, aes(x = Trihalomethanes, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Trihalomethanes", y = "Potability") +
annotate("text", x = 80, y = 0.8, label = paste("r =", round(summary_Trihalomethanes$r, 3), "\n", "p-value =", round(summary_Trihalomethanes$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Trihalomethanes")
print(plot_ph)
# Load required libraries
library(ggplot2)
library(dplyr)
# Check if df_cleanData exists and has the required columns
if (!exists("df_cleanData")) {
stop("df_cleanData does not exist.")
} else if (!all(c("ph", "Hardness", "Chloramines", "Trihalomethanes", "Potability") %in% colnames(df_cleanData))) {
stop("df_cleanData is missing required columns.")
}
# Create selected_data
selected_data <- df_cleanData %>%
select(ph, Hardness, Chloramines, Trihalomethanes, Potability)
# Check if selected_data is created properly
if (!exists("selected_data")) {
stop("selected_data not created.")
}
# Create a separate linear model for each predictor variable
model_ph <- lm(Potability ~ ph, data = selected_data)
model_Hardness <- lm(Potability ~ Hardness, data = selected_data)
model_Chloramines <- lm(Potability ~ Chloramines, data = selected_data)
model_Trihalomethanes <- lm(Potability ~ Trihalomethanes, data = selected_data)
get_summary <- function(model) {
summary_data <- summary(model)
r <- cor(selected_data$Potability, fitted(model))
p_value <- summary_data$coefficients[2, 4]
return(list(r = r, p_value = p_value))
}
# Get summary statistics for each model
summary_ph <- get_summary(model_ph)
summary_Hardness <- get_summary(model_Hardness)
summary_Chloramines <- get_summary(model_Chloramines)
summary_Trihalomethanes <- get_summary(model_Trihalomethanes)
# ph
plot_ph <- ggplot(selected_data, aes(x = ph, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "ph", y = "Potability") +
annotate("text", x = 4, y = 0.8, label = paste("r =", round(summary_ph$r, 3), "\n", "p-value =", round(summary_ph$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ ph")
# Hardness
plot_Hardness <- ggplot(selected_data, aes(x = Hardness, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Hardness", y = "Potability") +
annotate("text", x = 60, y = 0.8, label = paste("r =", round(summary_Hardness$r, 3), "\n", "p-value =", round(summary_Hardness$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Hardness")
# Chloramines
plot_Chloramines <- ggplot(selected_data, aes(x = Chloramines, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Chloramines", y = "Potability") +
annotate("text", x = 0, y = 0.8, label = paste("r =", round(summary_Chloramines$r, 3), "\n", "p-value =", round(summary_Chloramines$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Chloramines")
# Trihalomethanes
plot_Trihalomethanes <- ggplot(selected_data, aes(x = Trihalomethanes, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Trihalomethanes", y = "Potability") +
annotate("text", x = 80, y = 0.8, label = paste("r =", round(summary_Trihalomethanes$r, 3), "\n", "p-value =", round(summary_Trihalomethanes$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Trihalomethanes")
print(plot_ph)
print(plot_Hardness)
print(plot_Chloramines)
print(plot_Trihalomethanes)
library(dplyr)
library(ggplot2)
filtered_dataPH <- df_cleanData %>%
filter(ph >= 6.5 & ph <= 8.5) %>%
select(ph, Potability)
potable_count <- sum(filtered_dataPH$Potability == 1)
non_potable_count <- sum(filtered_dataPH$Potability == 0)
plot_data <- data.frame(
Potability = c("Potable", "Non-Potable"),
Count = c(potable_count, non_potable_count)
)
ggplot(plot_data, aes(x = Potability, y = Count, fill = Potability)) +
geom_bar(stat = "identity") +
labs(title = "Potability of Water Samples within Healthy pH Range from 6.5 to 8.5",
x = "Potability",
y = "Count") +
theme_minimal()
#### Count of Potable and Non-Potable Water
```{r, message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)
filtered_dataPH <- df_cleanData %>%
filter(ph >= 6.5 & ph <= 8.5) %>%
select(ph, Potability)
potable_count <- sum(filtered_dataPH$Potability == 1)
non_potable_count <- sum(filtered_dataPH$Potability == 0)
plot_data <- data.frame(
Potability = c("Potable", "Non-Potable"),
Count = c(potable_count, non_potable_count)
)
ggplot(plot_data, aes(x = Potability, y = Count, fill = Potability)) +
geom_bar(stat = "identity") +
labs(title = "Potability of Water Samples within Healthy pH Range from 6.5 to 8.5",
x = "Potability",
y = "Count") +
theme_minimal()
#### Count of Potable and Non-Potable Water
library(ggplot2)
# Create a dataframe with counts
data_counts <- data.frame(
Category = c("Potable", "Non-Potable"),
Count = c(nrow(df_potableOnly), nrow(df_nonPotableOnly))
)
# Create a bar plot
ggplot(data_counts, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, color = "black", size = 3) +  # Add text labels for count
labs(title = "Count of Potable and Non-Potable Water",
x = "Potability",
y = "Count") +
theme_minimal()
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 12, Trihalomethanes = 40)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 7.2, Hardness = 100, Chloramines = 2.0, Trihalomethanes = 60)
regular_unhealthy <- data.frame(ph = 6.5, Hardness = 150, Chloramines = 3.0, Trihalomethanes = 70)
absurdly_super_unhealthy <- data.frame(ph = 5.0, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "Prediction of Potability for Different Scenarios")
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 200, Trihalomethanes = 40)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 7.2, Hardness = 100, Chloramines = 2.0, Trihalomethanes = 60)
regular_unhealthy <- data.frame(ph = 6.5, Hardness = 150, Chloramines = 3.0, Trihalomethanes = 70)
absurdly_super_unhealthy <- data.frame(ph = 5.0, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "Prediction of Potability for Different Scenarios")
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 12, Trihalomethanes = 40)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 7.2, Hardness = 100, Chloramines = 2.0, Trihalomethanes = 60)
regular_unhealthy <- data.frame(ph = 6.5, Hardness = 150, Chloramines = 3.0, Trihalomethanes = 70)
absurdly_super_unhealthy <- data.frame(ph = 5.0, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "To see how well it can predicti Potability for Different Scenarios. 1 means can predict 0 means cannot predict")
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 12, Trihalomethanes = 40)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 7.2, Hardness = 100, Chloramines = 2.0, Trihalomethanes = 60)
regular_unhealthy <- data.frame(ph = 6.5, Hardness = 150, Chloramines = 3.0, Trihalomethanes = 70)
absurdly_super_unhealthy <- data.frame(ph = 5.0, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "To see how well it can predict potability for different scenarios. 1 means can predict 0 means cannot predict")
mean_values_potable <- colMeans(selected_data[selected_data$Potability == 1, c("ph", "Hardness", "Chloramines", "Trihalomethanes")])
mean_values_not_potable <- colMeans(selected_data[selected_data$Potability == 0, c("ph", "Hardness", "Chloramines", "Trihalomethanes")])
median_values_potable <- apply(selected_data[selected_data$Potability == 1, c("ph", "Hardness", "Chloramines", "Trihalomethanes")], 2, median)
median_values_not_potable <- apply(selected_data[selected_data$Potability == 0, c("ph", "Hardness", "Chloramines", "Trihalomethanes")], 2, median)
cat("Mean values for potable water:\n")
print(mean_values_potable)
cat("\nMean values for not potable water:\n")
print(mean_values_not_potable)
# Display median values
cat("\nMedian values for potable water:\n")
print(median_values_potable)
cat("\nMedian values for not potable water:\n")
print(median_values_not_potable)
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 3.0, Trihalomethanes = 90)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7.0, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 6.8, Hardness = 150, Chloramines = 4.0, Trihalomethanes =100)
regular_unhealthy <- data.frame(ph = 4 , Hardness = 250, Chloramines = 8.0, Trihalomethanes = 30)
absurdly_super_unhealthy <- data.frame(ph = 14, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "To see how well it can predict potability for different scenarios. 1 means can predict 0 means cannot predict")
generate_synthetic_data <- function(n, potability_data) {
ph <- sample(potability_data$ph, n, replace = TRUE)
Hardness <- sample(potability_data$Hardness, n, replace = TRUE)
Chloramines <- sample(potability_data$Chloramines, n, replace = TRUE)
Trihalomethanes <- sample(potability_data$Trihalomethanes, n, replace = TRUE)
# Create dataframe
data <- data.frame(ph, Hardness, Chloramines, Trihalomethanes)
# Add Potability column
data$Potability <- rep(1, n)
return(data)
}
# Generate synthetic data with known Potability (1 for potable)
synthetic_data_potable <- generate_synthetic_data(100, selected_data[selected_data$Potability == 1, ])
head(synthetic_data_potable)
library(dplyr)
library(ggplot2)
filtered_dataPH <- df_cleanData %>%
filter(ph >= 6.5 & ph <= 8.5) %>%
select(ph, Potability)
potable_count <- sum(filtered_dataPH$Potability == 1)
non_potable_count <- sum(filtered_dataPH$Potability == 0)
plot_data <- data.frame(
Potability = c("Potable", "Non-Potable"),
Count = c(potable_count, non_potable_count)
)
ggplot(plot_data, aes(x = Potability, y = Count, fill = Potability)) +
geom_bar(stat = "identity") +
labs(title = "Potability of Water Samples within Healthy pH Range from 6.5 to 8.5",
x = "Potability",
y = "Count") +
theme_minimal()
#### Count of Potable and Non-Potable Water
library(ggplot2)
# Create a dataframe with counts
data_counts <- data.frame(
Category = c("Potable", "Non-Potable"),
Count = c(nrow(df_potableOnly), nrow(df_nonPotableOnly))
)
# Create a bar plot
ggplot(data_counts, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, color = "black", size = 3) +  # Add text labels for count
labs(title = "Count of Potable and Non-Potable Water",
x = "Potability",
y = "Count") +
theme_minimal()
library(ggplot2)
library(dplyr)
# Plot 1: Non-Healthy Hardness
plot_non_healthy <- df_cleanData %>%
filter(Hardness < 60 | Hardness > 120) %>%
group_by(Potability) %>%
summarise(Count = n()) %>%
ggplot(aes(x = Potability, y = Count, fill = factor(Potability))) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, size = 3) +
labs(title = "Non-Healthy Hardness",
x = "Potability",
y = "Count",
fill = "Potability") +
theme_minimal()
# Plot 2: Healthy Hardness
plot_healthy <- df_cleanData %>%
filter(Hardness >= 60 & Hardness <= 120) %>%
group_by(Potability) %>%
summarise(Count = n()) %>%
ggplot(aes(x = Potability, y = Count, fill = factor(Potability))) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, size = 3) +
labs(title = "Healthy Hardness",
x = "Potability",
y = "Count",
fill = "Potability") +
theme_minimal()
# Arrange the plots side by side
library(gridExtra)
grid.arrange(plot_non_healthy, plot_healthy, ncol = 2, top = "Potability Comparison")
library(ggplot2)
library(dplyr)
# Filtered data for potable and non-potable samples within the specified range
filtered_potable <- df_cleanData %>%
filter(Potability == 1, Chloramines <= 4.5) %>%
select(Chloramines)
filtered_non_potable <- df_cleanData %>%
filter(Potability == 0, Chloramines <= 4.5) %>%
select(Chloramines)
count_potable <- nrow(filtered_potable)
count_non_potable <- nrow(filtered_non_potable)
# Create side-by-side box plots for potable and non-potable samples
ggplot() +
geom_boxplot(data = filtered_potable, aes(x = Chloramines, y = "Potable"), fill = "lightblue", color = "blue", alpha = 0.5, position = position_dodge(width = 0.8)) +
geom_boxplot(data = filtered_non_potable, aes(x = Chloramines, y = "Non-Potable"), fill = "lightpink", color = "red", alpha = 0.5, position = position_dodge(width = 0.8)) +
geom_text(aes(x = 2, y = max(filtered_potable$Chloramines), label = paste()),
vjust = 1, hjust = 0.5, color = "blue") +
geom_text(aes(x = 3, y = min(filtered_non_potable$Chloramines), label = paste()),
vjust = -0.5, hjust = 0.5, color = "red") +
labs(title = "Distribution of Healthy Chloramine Concentrations",
x = "Chloramine Concentration",
y = "Potability") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
filtered_unhealthy_potable <- df_cleanData %>%
filter(Potability == 1, Chloramines > 4.6)
filtered_unhealthy_non_potable <- df_cleanData %>%
filter(Potability == 0, Chloramines > 4.6)
ggplot() +
geom_boxplot(data = filtered_unhealthy_potable, aes(x = Chloramines, y = "Potable"), fill = "lightblue", color = "blue", alpha = 0.5, position = position_dodge(width = 0.8)) +
geom_boxplot(data = filtered_unhealthy_non_potable, aes(x = Chloramines, y = "Non-Potable"), fill = "lightpink", color = "red", alpha = 0.5, position = position_dodge(width = 0.8)) +
geom_text(aes(x = 2, y = max(filtered_unhealthy_potable$Chloramines), label = paste()),
vjust = 1, hjust = 0.5, color = "blue") +
geom_text(aes(x = 3, y = min(filtered_unhealthy_non_potable$Chloramines), label = paste()),
vjust = -0.5, hjust = 0.5, color = "red") +
labs(title = "Distribution of Unhealthy Chloramine Concentrations",
x = "Chloramine Concentration",
y = "Potability") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
onlyTmh <- df_cleanData %>%
mutate(Potability = as.factor(Potability)) %>%
select(Trihalomethanes, Potability)
ggplot(onlyTmh, aes(x = Potability, y = Trihalomethanes, fill = Potability)) +
geom_bar(stat = "identity") +
labs(x = "Potable/Non-potable", y = "Trihalomethanes Levels") +
scale_fill_manual(values = c("green", "red"), labels = c("Potable", "Non-potable")) +
geom_hline(yintercept = 80, linetype = "dashed", color = "blue") +
geom_hline(yintercept = 100, linetype = "dashed", color = "red") +
annotate("text", x = 1, y = 80, label = "80 µg/L", vjust = -1, color = "blue") +
annotate("text", x = 1, y = 100, label = "100 µg/L", vjust = -1, color = "red") +
scale_y_continuous(limits = c(0, 124)) +
theme_minimal()
# Load required libraries
library(ggplot2)
library(dplyr)
# Check if df_cleanData exists and has the required columns
if (!exists("df_cleanData")) {
stop("df_cleanData does not exist.")
} else if (!all(c("ph", "Hardness", "Chloramines", "Trihalomethanes", "Potability") %in% colnames(df_cleanData))) {
stop("df_cleanData is missing required columns.")
}
# Create selected_data
selected_data <- df_cleanData %>%
select(ph, Hardness, Chloramines, Trihalomethanes, Potability)
# Check if selected_data is created properly
if (!exists("selected_data")) {
stop("selected_data not created.")
}
# Create a separate linear model for each predictor variable
model_ph <- lm(Potability ~ ph, data = selected_data)
model_Hardness <- lm(Potability ~ Hardness, data = selected_data)
model_Chloramines <- lm(Potability ~ Chloramines, data = selected_data)
model_Trihalomethanes <- lm(Potability ~ Trihalomethanes, data = selected_data)
get_summary <- function(model) {
summary_data <- summary(model)
r <- cor(selected_data$Potability, fitted(model))
p_value <- summary_data$coefficients[2, 4]
return(list(r = r, p_value = p_value))
}
# Get summary statistics for each model
summary_ph <- get_summary(model_ph)
summary_Hardness <- get_summary(model_Hardness)
summary_Chloramines <- get_summary(model_Chloramines)
summary_Trihalomethanes <- get_summary(model_Trihalomethanes)
# ph
plot_ph <- ggplot(selected_data, aes(x = ph, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "ph", y = "Potability") +
annotate("text", x = 4, y = 0.8, label = paste("r =", round(summary_ph$r, 3), "\n", "p-value =", round(summary_ph$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ ph")
# Hardness
plot_Hardness <- ggplot(selected_data, aes(x = Hardness, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Hardness", y = "Potability") +
annotate("text", x = 60, y = 0.8, label = paste("r =", round(summary_Hardness$r, 3), "\n", "p-value =", round(summary_Hardness$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Hardness")
# Chloramines
plot_Chloramines <- ggplot(selected_data, aes(x = Chloramines, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Chloramines", y = "Potability") +
annotate("text", x = 0, y = 0.8, label = paste("r =", round(summary_Chloramines$r, 3), "\n", "p-value =", round(summary_Chloramines$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Chloramines")
# Trihalomethanes
plot_Trihalomethanes <- ggplot(selected_data, aes(x = Trihalomethanes, y = Potability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Trihalomethanes", y = "Potability") +
annotate("text", x = 80, y = 0.8, label = paste("r =", round(summary_Trihalomethanes$r, 3), "\n", "p-value =", round(summary_Trihalomethanes$p_value, 3)), parse = TRUE) +
ggtitle("Linear Model: Potability ~ Trihalomethanes")
print(plot_ph)
print(plot_Hardness)
print(plot_Chloramines)
print(plot_Trihalomethanes)
predict_model <- lm(Potability ~ ph + Hardness + Chloramines + Trihalomethanes, data = selected_data)
summary(predict_model)
perfectly_healthy <- data.frame(ph = 7.5, Hardness = 80, Chloramines = 3.0, Trihalomethanes = 90)
average_values <- data.frame(ph = 7, Hardness = 196, Chloramines = 7.0, Trihalomethanes = 67)
regular_healthy <- data.frame(ph = 6.8, Hardness = 150, Chloramines = 4.0, Trihalomethanes =100)
regular_unhealthy <- data.frame(ph = 4 , Hardness = 250, Chloramines = 8.0, Trihalomethanes = 30)
absurdly_super_unhealthy <- data.frame(ph = 14, Hardness = 300, Chloramines = 10.0, Trihalomethanes = 120)
test_data <- rbind(perfectly_healthy, average_values, regular_healthy, regular_unhealthy, absurdly_super_unhealthy)
test_data$Potability <- c("Perfectly Healthy", "Average of All Values", "Regular Healthy", "Regular Unhealthy", "Absurdly Super Unhealthy")
prediction <- predict(predict_model, newdata = test_data)
prediction_result <- cbind(test_data, Potability_Prediction = prediction)
# Print prediction result using kable
knitr::kable(prediction_result, caption = "To see how well it can predict potability for different scenarios. 1 means can predict 0 means cannot predict")
generate_synthetic_data <- function(n, potability_data) {
ph <- sample(potability_data$ph, n, replace = TRUE)
Hardness <- sample(potability_data$Hardness, n, replace = TRUE)
Chloramines <- sample(potability_data$Chloramines, n, replace = TRUE)
Trihalomethanes <- sample(potability_data$Trihalomethanes, n, replace = TRUE)
# Create dataframe
data <- data.frame(ph, Hardness, Chloramines, Trihalomethanes)
# Add Potability column
data$Potability <- rep(1, n)
return(data)
}
# Generate synthetic data with known Potability (1 for potable)
synthetic_data_potable <- generate_synthetic_data(100, selected_data[selected_data$Potability == 1, ])
head(synthetic_data_potable)
mean_values_potable <- colMeans(selected_data[selected_data$Potability == 1, c("ph", "Hardness", "Chloramines", "Trihalomethanes")])
mean_values_not_potable <- colMeans(selected_data[selected_data$Potability == 0, c("ph", "Hardness", "Chloramines", "Trihalomethanes")])
median_values_potable <- apply(selected_data[selected_data$Potability == 1, c("ph", "Hardness", "Chloramines", "Trihalomethanes")], 2, median)
median_values_not_potable <- apply(selected_data[selected_data$Potability == 0, c("ph", "Hardness", "Chloramines", "Trihalomethanes")], 2, median)
cat("Mean values for potable water:\n")
print(mean_values_potable)
cat("\nMean values for not potable water:\n")
print(mean_values_not_potable)
cat("\nMedian values for potable water:\n")
print(median_values_potable)
cat("\nMedian values for not potable water:\n")
print(median_values_not_potable)
